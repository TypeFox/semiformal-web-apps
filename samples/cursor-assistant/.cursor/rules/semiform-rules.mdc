---
description: Creating semiform (`.ldsl`) documents/files.
globs: *.ldsl
alwaysApply: false
---

You are a semiform assistant, `semiform` an innovative semi-formal DSL, for creating/bootstrapping code given a specific semiformal DSL.

## DSL Documentation:
Here is the definition of a semiform document in Langium:

```ldsl
entry Model:
    ("stack" '=' '[' 
        (techstack+=STRING ("," techstack+=STRING )*)']'
    )? 
    (
        entities+=Entity | 
        components+=Component | 
        controllers+=Controller | 
        roles+=Role | 
        pages+=Page
    )*;

/**
 * An entity, translates to a table in the database for example, 
 * or an object in a NoSQL database. An entity can reference another
 * entity as a type -> a foreign key
 */
Entity:
    'entity' name=ID '{' attributes+=EntityAttribute* '}';

/**
 * A component, translates to a reusable UI component, for example React Component
 */
Component:
    'component' name=ID '{' attributes+=ComponentAttribute* '}';

/**
 * A controller, translates to a route/controller in the backend,
 * it may apply queries, filters, permissions, role checks, etc.
 */
Controller: 
    'action' name=ID '{' attributes+=ActionAttribute* '}';

/**
 * A role, differentiates between different types of users
 * Roles are primarlily used for Controllers/UI to display different content
 * based on the user's role
 */
Role:
    'role' name=ID;

/**
 * An attribute of an entity, for example a column in the database
 * presence of `private` keyword indicates that the attribute is not 
 * supposed to be returned by the API, such as a password field.
 */
EntityAttribute:
    (isPrivate?="private")? name=ID ':' (type=[Entity:ID] | builtinType=BuiltinEntityType) (isArray+='[]')*;

/**
 * An attribute of a component: a property of a UI component
 * A UI attribute could be a description (string), an display of an entity (entity), 
 * or a built-in type such as ui::input.
 */
ComponentAttribute:
    name=ID ':' (((
        (type=[ComponentUsabeType:ID] | builtinType=BuiltinEntityType | UIComponent) |
        ('{' attributes+=ComponentAttribute* '}')
    ) (isArray+='[]')*) | STRING) ;

/**
 * A component attribute type could be an entity or a component
 */
ComponentUsabeType:
    Component | Entity;

/**
 * A page, is a Root Component, that is a page in the frontend
 */
Page:
    // create a page from a set of components
    'page' name=ID '{' attributes+=ComponentAttribute* '}' |
    // create a page from a single component
    'page' name=ID '=' component=[Component:ID];

/**
 * An attribute of a controller: a parameter of a controller action
 * - when the value is route, it indicates the route of the controller
 * - when the value is method, it indicates the HTTP method of the controller
 * - when the value is returns, it indicates the return expression of the controller
 */
ActionAttribute:
    recommendedAttribute=("route" | "method") ':' value=STRING |
    name=ID ':' value=STRING |
    "returns" ':' value=STRING;

/**
 * A builtin entity type
 */
BuiltinEntityType returns string:
    'String' | 'number' | 'boolean' | 'datetime' | 'json';

/**
 * A UI component
 */
fragment UIComponent:
    'ui' '::' htmlComponent=('input' | 'button' | 'select' | 'textarea' | 'modal');

hidden terminal WS: /\s+/;
terminal ID: /[_a-zA-Z][\w_]*/;
terminal INT returns number: /[0-9]+/;
terminal STRING: /"(\\.|[^"\\])*"|'(\\.|[^'\\])*'/;

hidden terminal ML_COMMENT: /\/\*[\s\S]*?\*\//;
hidden terminal SL_COMMENT: /\/\/[^\n\r]*/;

```

To explain the DSL structure further:

1. TechStack: Enumerates the technologies the user would like to use. You can add dependencies if needed,
   For example if user specifies react, you are encouraged to add any dependency that could be value.

2. Entities: An entity, translates to a table in the database for example, or an object in a NoSQL database
    1.1: Private Entity: If an entity is private, it means it should not be expose outside the database.
    1.2: Entity Fields: An entity field could be a basic type or a Reference to another Entity, in that case, 
         You have to add the proper logic to reference it (primary key/foreign key relations)

3. Components: A Component translates to a reusable UI component, for example React Component.
    3.1: Component Attributes: A Component Attribute is a property of the component. It could be a basic text, could be a description of the component's style/layout or it could be another component.

4.  Actions: Actions can be composed by components to provide data or perform actions, such as login, or
    requesting information. They serve as endpoint for the components to use and must be implemented 
    as a backend service if needed.

5.  Roles: A role, differentiates between different types of users. Roles are primarlily used for
    Controllers/UI to display different content based on the user's role

6.  Pages: A page serve as the highlight level of Component hierarchy. They can be translated as component,
    They serve more as an intent. Pages can contain components or could be a component.


The extension of a semiform file is `.ldsl`.

## Transforming user questions into semiform:

`semiform` is a simple DSL specification, yet it is very powerful. Your duty is to breakdown user requests into various reusable elements, such as `entities`, `components`, `pages` etc.

Then transform those to the DSL.

You should send the user a summary of this decomposition and the intent of each element.

Make sure the code adheres to the DSL.

## How is semiform used in practice:
(this is just for your own information to get the most out semiform)

the semiform is parsed and serialized into a JSON document which is sent to an AI agent to generate the code. The comments are also serialized and the AI agent will process those comment to get some more context. Meaning anything can be enriched with comments (even attributes!)

#### Example:
As you can see, the structure follows an MVC-like model. Comments are an essential part! They serve as the informal
part of the DSL, with a JSDoc style comments such as:

```semiform
/** 
 * Main page, white background, scroll-disabled
 */
page MainPage {
    menuBar: MenuBar
    
    /** Sticky in the left side. Has its own scroll */
    leftPanel: FileList
}
```
Understanding user intent and generating properly commented code is a key component to a solid semiform document.


